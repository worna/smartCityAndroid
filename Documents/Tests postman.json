{
	"info": {
		"_postman_id": "a69c37cb-b4a9-4fb8-a2e3-e4c929a38a1e",
		"name": "Smart city",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SportHall",
			"item": [
				{
					"name": "Get sporthall",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "310a2142-a289-48a9-b37c-760ffd7936e8",
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Sport hall 1 should be correctly returned\", () => {\r",
									"    const sportHall_one = {\r",
									"        \"id\": 1,\r",
									"        \"name\": \"Jims\",\r",
									"        \"manager\": 1,\r",
									"        \"phone_number\": \"0123456789\",\r",
									"        \"email\": \"lodsqz@udi.com\"\r",
									"    };\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.be.eql(sportHall_one);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdGF0dXMiOiJtYW5hZ2VyIiwidmFsdWUiOnsiaWQiOjEsImxhc3RfbmFtZSI6IlphZ29yc2tpIn0sImlhdCI6MTYwNjg5OTI4OSwiZXhwIjoxNjA2OTg1Njg5fQ.Gz0QRVQqL84eZyPRdAlYXDS4DlmVt3lI0lLZtSGZKMQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/sportHall/1",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"sportHall",
								"1"
							]
						},
						"description": "Get sportHall 1"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Wrong login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd229e8b-f37d-4df9-b137-76ce75aef89c",
								"exec": [
									"pm.test(\"The status code should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"etu12344@henallux.be\",\r\n    \"password\": \"motdepassee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Good login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42639594-414d-4517-8ce3-106656944187",
								"exec": [
									"pm.test(\"The status code should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response should have a JWT token\", () => {\r",
									"    pm.response.to.be.string;\r",
									"    pm.expect(pm.response.text().split('.').length).to.be.equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"etu1234@henallux.be\",\r\n    \"password\": \"motdepasse\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba934f6d-15f6-4d4c-9b0f-9c09d54b7e9e",
								"exec": [
									"pm.test(\"The JWT should contain status: customer\", () => {\r",
									"    const text = pm.response.text();\r",
									"    const payload_string = atob(text.split(\".\")[1]); \r",
									"    const payload_objet = JSON.parse(payload_string);\r",
									"    pm.expect(payload_objet.status).to.be.equal(\"customer\"); \r",
									"    pm.environment.set(\"jwt_token_client\", text.split('\"')[1]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"etu40153@henallux.be\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdc96371-c974-4e6c-9de4-1b80c19b9501",
								"exec": [
									"pm.test(\"The JWT should contain status: manager\", () => {\r",
									"    const text = pm.response.text();\r",
									"    const payload_string = atob(text.split(\".\")[1]); // see: https://gist.github.com/benhowes/ebf9d2f905d7744e7aa093afe19ddbcd#gistcomment-2811160\r",
									"    const payload_objet = JSON.parse(payload_string);\r",
									"    pm.expect(payload_objet.status).to.be.equal(\"manager\");\r",
									"    pm.environment.set(\"jwt_token_manager\", text.split('\"')[1]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"etu1234@henallux.be\",\r\n    \"password\": \"motdepasse\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Customer",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SportHallCustomer",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Course",
			"item": [
				{
					"name": "Get course",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28070bb5-d2c5-48d1-b4b6-e0b5f98f3961",
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Course 1 should be correctly returned\", () => {\r",
									"    const course_one = {\r",
									"        \"id\": 1,\r",
									"        \"id_sport_hall\": 1,\r",
									"        \"starting_date_time\": \"2020-11-24\",\r",
									"        \"ending_date_time\": \"2020-11-24\",\r",
									"        \"level\": \"A voir si on a des problèmes\",\r",
									"        \"activity\": \"Développement de client Web avancé\",\r",
									"        \"room\": \"A distance\",\r",
									"        \"id_instructor\": 2\r",
									"    };\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.be.eql(course_one);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/course/1",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"course",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e51e3086-a070-48b0-bcea-be23823d7a8e",
								"exec": [
									"pm.test(\"The JWT should contain status: manager\", () => {\r",
									"    const text = pm.response.text();\r",
									"    const payload_string = atob(text.split(\".\")[1]); // see: https://gist.github.com/benhowes/ebf9d2f905d7744e7aa093afe19ddbcd#gistcomment-2811160\r",
									"    const payload_objet = JSON.parse(payload_string);\r",
									"    pm.expect(payload_objet.status).to.be.equal(\"manager\");\r",
									"    pm.environment.set(\"jwt_token_manager\", text.split('\"')[1]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"etu1234@henallux.be\",\r\n    \"password\": \"motdepasse\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add course as manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e331b1-b31b-4837-84e1-78766ee1bef1",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id_sport_hall\": 1,\r\n    \"starting_date_time\": \"2020-11-24\",\r\n    \"ending_date_time\": \"2020-11-24\",\r\n    \"level\": \"A voir si on a des problèmes\",\r\n    \"activity\": \"new\",\r\n    \"room\": \"salle n°1\",\r\n    \"id_instructor\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/course",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"course"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get new course",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0774144-6a88-45cf-85c0-7cd7b9136f4d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"New course should be correctly returned\", () => {\r",
									"    const new_course = {\r",
									"        \"id\": 4,\r",
									"        \"id_sport_hall\": 1,\r",
									"        \"starting_date_time\": \"2020-11-24\",\r",
									"        \"ending_date_time\": \"2020-11-24\",\r",
									"        \"level\": \"A voir si on a des problèmes\",\r",
									"        \"activity\": \"new\",\r",
									"        \"room\": \"salle n°1\",\r",
									"        \"id_instructor\": 2\r",
									"    };\r",
									"    const response = pm.response.json()\r",
									"    console.log(response);\r",
									"    console.log(new_course);\r",
									"    pm.expect(response).to.be.eql(new_course);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/course/4",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"course",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete new course",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1eb4cfa6-d6e2-4b66-a63d-d1985f4131eb",
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/course",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"course"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted course",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c00a8850-631b-4eed-90e4-5d48e4b1c431",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/course/4",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"course",
								"4"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}